// src/styles/base/index.scss

// --- Optional: Import Variables ---
// If you have a shared _variables.scss file, import it here.
// Otherwise, define necessary variables directly.
// @import '../variables'; // Example

// --- Base HTML and Body Styles ---
html {
  box-sizing: border-box; // Apply a more intuitive box model globally.
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; // Modern default font stack
  scroll-behavior: smooth; // Smooth scrolling for anchor links, etc.
}

*,
*::before,
*::after {
  box-sizing: inherit; // All elements inherit the box-sizing from html.
}

body {
  margin: 0; // Remove default browser margin.
  line-height: 1.6; // Set a comfortable line height.
  color: #333; // Default text color for better readability.
  background-color: #f4f6f8; // A light, neutral background for the main content area.
  // Ensures that if content is shorter than viewport, this bg color is visible.
}

// --- Application Layout Styles ---

// Define transition duration (should match what's used in Tabbar.scss for its width transition)
$main-content-transition-duration: 0.25s; // Example, adjust to match Tabbar's transition

// Default value for the Tabbar width (expanded).
// Tabbar.jsx will update this CSS custom property dynamically via JavaScript.
// This :root definition acts as a fallback or initial state.
:root {
  --tabbar-current-width: 250px; /* Fallback to expanded width; JS in Tabbar.jsx should set this */
}

.AppContainer {
  // If AppContainer wraps both Tabbar (fixed) and MainScreen,
  // no specific flex/grid layout is strictly needed on AppContainer itself
  // for *this particular* Tabbar vs MainScreen interaction, as Tabbar is position:fixed.
  // However, it's common to have AppContainer manage overall application structure.
  // For instance, if you had a fixed header *above* AppContainer:
  // position: relative;
  // top: $your-global-header-height; // If applicable
}

.MainScreen {
  // This is the main content area that needs to adjust its left padding
  // based on the Tabbar's current width.
  padding-left: var(--tabbar-current-width);
  // Apply a transition to padding-left to match the Tabbar's expand/collapse animation.
  transition: padding-left $main-content-transition-duration ease-in-out;

  // Ensure that padding is included within the element's total width and height,
  // not added on top of it. This is crucial for predictable layout.
  box-sizing: border-box;

  // Optional: If MainScreen should always try to fill the viewport height.
  // This is useful if your content per view might be short.
  min-height: 100vh;

  // Consistent internal padding for the content within each screen.
  // Adjust these values to your design preference.
  padding-top: 24px;
  padding-right: 32px; // Slightly more horizontal padding for content
  padding-bottom: 32px;

  // If the content within a specific screen (e.g., a very wide table)
  // needs to scroll horizontally, that screen component should handle its own overflow.
  // Adding overflow-x: auto; here would make the entire MainScreen scroll horizontally.
  // Generally, it's better to design content to be responsive or for specific wide elements
  // to have their own scroll container.
  // overflow-x: hidden; // Can be used to prevent accidental horizontal scrollbars on MainScreen itself.

  // If the content within MainScreen is expected to be taller than the viewport
  // and you want the MainScreen itself (not the body) to be the primary scroll container:
  // height: 100vh; // Fix height to viewport
  // overflow-y: auto; // Allow vertical scrolling within MainScreen
  // (If you do this, ensure body has overflow: hidden; and adjust padding-top for any global headers)
}

// --- Example: Handling a Global Fixed Header ---
// If you have a global header that is *always* visible at the top of the viewport,
// and both Tabbar and MainScreen are positioned *below* it:
//
// $global-fixed-header-height: 60px; // Example height
//
// body.has-global-fixed-header {
//   padding-top: $global-fixed-header-height; // Push all content down
//
//   .Tabbar { // Assuming Tabbar is fixed within the remaining viewport
//     top: $global-fixed-header-height;
//     height: calc(100vh - #{$global-fixed-header-height});
//   }
//
//   .MainScreen {
//     // MainScreen's padding-top would be relative to its starting position below the header.
//     // If AppContainer itself is pushed down, MainScreen's padding-top: 24px might still be fine.
//     // Or, if MainScreen is also fixed and needs to calculate its height:
//     // min-height: calc(100vh - #{$global-fixed-header-height});
//   }
// }