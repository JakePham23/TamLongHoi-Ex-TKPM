import { API_URL } from "../utils/constants";
const API_BASE_URL = `${API_URL}/registrations`;

class RegistrationService {
    async getAllRegistrations() {
        try {
            const response = await fetch(`${API_BASE_URL}`);
            if (!response.ok) {
                throw new Error('L·ªói khi l·∫•y danh s√°ch ƒëƒÉng k√Ω');
            }
            const data = await response.json();
            return data.metadata;
        } catch (error) {
            console.log(error);
            return [];
        }
    }

    async addRegistration(registrationData) {
        try {
            const response = await fetch(`${API_BASE_URL}/add`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(registrationData)
            });
            if (!response.ok) {
                throw new Error('L·ªói khi th√™m ƒëƒÉng k√Ω');
            }
            return await response.json();
        } catch (error) {
            console.log(error);
            return [];
        }
    }

    async updateRegistration(registrationId, registrationData) {
        try {
            const response = await fetch(`${API_BASE_URL}/${registrationId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(registrationData)
            });

            // Ki·ªÉm tra xem ph·∫£n h·ªìi c√≥ h·ª£p l·ªá kh√¥ng
            if (!response.ok) {
                const errorMessage = await response.text(); // L·∫•y th√¥ng ƒëi·ªáp l·ªói t·ª´ ph·∫£n h·ªìi
                throw new Error(`L·ªói khi c·∫≠p nh·∫≠t ƒëƒÉng k√Ω: ${errorMessage}`);
            }

            // Ki·ªÉm tra n·∫øu ph·∫£n h·ªìi kh√¥ng r·ªóng tr∆∞·ªõc khi g·ªçi .json()
            const text = await response.text();
            return text ? JSON.parse(text) : {}; // Ph√¢n t√≠ch d·ªØ li·ªáu JSON n·∫øu c√≥
        } catch (error) {
            console.log(error);
            return [];
        }
    }

    async deleteRegistration(registrationId) {
        try {
            console.log("üóëÔ∏è Deleting registration with ID:", registrationId); // üëà HI·ªÇN TH·ªä RA CONSOLE
            const response = await fetch(`${API_BASE_URL}/${registrationId}`, {
                method: 'DELETE'
            });
            if (!response.ok) {
                throw new Error('L·ªói khi x√≥a ƒëƒÉng k√Ω');
            }
            return await response.json();
        } catch (error) {
            console.error(error);
            throw error;
        }
    }
}

export default new RegistrationService();